package org.jboss.resteasy.test.xxe;

import java.util.Hashtable;

import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Consumes;
import javax.ws.rs.PathParam;

import junit.framework.Assert;

import org.jboss.resteasy.client.ClientRequest;
import org.jboss.resteasy.client.ClientResponse;
import org.jboss.resteasy.test.BaseResourceTest;
import org.junit.Test;

import static org.jboss.resteasy.test.TestPortProvider.*;

public class TestXXESecureProcessingVulnerability extends BaseResourceTest {

	String xmlString =
			"<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]>" +
            "<favoriteMovieXmlRootElement><title>&xxe;</title></favoriteMovieXmlRootElement>";

	@Path("/")
	public static class MovieResource {

		@POST
		@Path("user/{id}/favoriteMovies")
		@Consumes({"application/xml", "application/json"})
		public String addFavoriteMovie(@PathParam("id") Long id, FavoriteMovieXmlRootElement movie) {
			return movie.getTitle();
		}
	}

	public void before(String expandEntityReferences) throws Exception {
		Hashtable<String,String> initParams = new Hashtable<String,String>();
	    Hashtable<String,String> contextParams = new Hashtable<String,String>();
	    if (expandEntityReferences != null)
	    	contextParams.put("resteasy.document.expand.entity.references", expandEntityReferences);
	    createContainer(initParams, contextParams);
	    addPerRequestResource(MovieResource.class, ObjectFactory.class, FavoriteMovieXmlType.class, FavoriteMovieXmlRootElement.class);
	    startContainer();
	}

	@Override
	public void before() throws Exception {
		manualStart = true;
	    super.before();
	}

	@Test
	public void testXXEVulnerability() throws Exception {
		before(null);
	    ClientRequest request = new ClientRequest(generateURL("/user/1/favoriteMovies"));
	    request.body("application/xml", xmlString);
	    ClientResponse<?> response = request.post();
	    System.out.println("status: " + response.getStatus());
	    String entity = response.getEntity(String.class);
	    System.out.println("Result: " + entity);
	    Assert.assertTrue(entity.contains("javax.xml.bind.UnmarshalException"));

	}

}
