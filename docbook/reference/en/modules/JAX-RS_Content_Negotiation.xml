<chapter id="JAX-RS_Content_Negotiation">
   <title>JAX-RS Content Negotiation</title>

   <para>

      The HTTP protocol has built in content negotiation headers that allow the client and server to specify what
      content they are transferring and what content they would prefer to get. The server declares content preferences
      via the @ProduceMime and @ConsumeMime headers.
   </para>
   <para>


      @ConsumeMime is an array of media types that a particular resource or resource method consumes. For example:
   </para>
   <para>

      <programlisting>
         @ConsumeMime("text/*")
         @Path("/library")
         public class Library {

         @POST
         public String stringBook(String book) {...}


         @ConsumeMime("text/xml")
         @POST
         public String jaxbBook(Book book) {...}
      </programlisting>
   </para>
   <para>

      When a client makes a request, JAX-RS first finds all methods that match the path, then, it sorts things based on
      the content-type header sent by the client.
      So, if a client sent:
   </para>
   <para>

      <programlisting>
         POST /library
         content-type: text/plain

         thsi sis anice book
      </programlisting>
   </para>
   <para>

      The stringBook() method would be invoked because it matches to the default &quot;text/*&quot; media type. Now, if
      the client instead sends XML:
   </para>
   <para>

      <programlisting>
         POST /library
         content-type: text/xml

         &lt;book name="EJB 3.0" author="Bill Burke"/&gt;
      </programlisting>
   </para>
   <para>

      The jaxbBook() method would be invoked.
   </para>
   <para>


      The @ProduceMime is used to map a client request and match it up to the client's Accept header. The Accept HTTP
      header is sent by the client and defines the media types the client prefers to receive from the server.
   </para>
   <para>


      <programlisting>
         @ProduceMime("text/*")
         @Path("/library")
         public class Library {

         @GET
         @ProduceMime("application/json")
         public String getJSON() {...}


         @GET
         public String get() {...}
      </programlisting>
   </para>
   <para>

      So, if the client sends:
   </para>
   <para>

      <programlisting>
         GET /library
         Accept: application/json
      </programlisting>
   </para>
   <para>

      The getJSON() method would be invoked
   </para>
   <para>


      @ConsumeMime and @ProduceMime can list multiple media types that they support. The client's Accept header can also
      send multiple types it might like to receive. More specific media types are chosen first. The client Accept header
      or @ProduceMime @ConsumeMime can also specify weighted preferences that are used to match up requests with
      resource methods. This is best explained by RFC 2616 section 14.1 . Resteasy supports this complex way of doing
      content negotiation.
   </para>
   <para>


   </para>
   <para>

      A variant in JAX-RS is a combination of media type, content-language, and content encoding as well as etags, last
      modified headers, and other preconditions. This is a more complex form of content negotiation that is done
      programmatically by the application developer using the javax.ws.rs.Variant, VarianListBuilder, and Request
      objects. Request is injected via @HttpContext. Read the javadoc for more info on these.
   </para>
   <para>

   </para>
   <para>


   </para>
</chapter>
